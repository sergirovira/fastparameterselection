from scipy.optimize import fsolve
from numpy import pi, exp, log, log2, sqrt, multiply, divide, ceil, max
import scipy.special
import math

def _delta(beta):
    small = (
        (2, 1.02190),
        (5, 1.01862),
        (10, 1.01616),
        (15, 1.01485),
        (20, 1.01420),
        (25, 1.01342),
        (28, 1.01331),
        (40, 1.01295),
    )
    return (beta / (2 * pi * e) * (pi * beta) ** (1 / beta)) ** (1 / (2 * (beta - 1)))


# n:15 logq:700 h:128 eta: 2 beta:299 lambda:136.93750293515308 zeta:8209 d:49099 red:136.4268748378904 svp:135.19128999384753 prob:0.000255857412915181 wt:17
# n:15 logq:750 h:128 eta: 2 beta:282 lambda:129.9599337180137 zeta:7425 d:50759 red:129.69504814750738 svp:127.38419157814215 prob:0.000900574382913918 wt:16
# n:15 logq:800 h:128 eta: 2 beta:263 lambda:123.68384342306358 zeta:6911 d:51827 red:123.43861684737557 svp:121.00638738252408 prob:0.00150195804601612 wt:15
# n:15 logq:850 h:128 eta: 2 beta:255 lambda:117.89515759071558 zeta:5814 d:54129 red:117.52662862028342 svp:115.7458969930963 prob:0.0185552242809837 wt:15
# n:15 logq:900 h:128 eta: 2 beta:247 lambda:112.99590841004758 zeta:4798 d:56253 red:112.51309578319183 svp:111.18199718742733 prob:0.117085330639929 wt:15
# n:15 logq:950 h:128 eta: 2 beta:231 lambda:108.0767507652688 zeta:4416 d:56983 red:107.77952697412651 svp:105.65154451688593 prob:0.123360163161690 wt:14
# n:15 logq:1000 h:128 eta: 2 beta:216 lambda:103.54478126305857 zeta:4153 d:57524 red:103.37133921958673 svp:100.40268813476786 prob:0.126838697663571 wt:13

#[logq, h, beta, ng, d, wg]
all_params_mitm = [ [700, 64, 187, 14594, 34770, 10], [750, 64, 202, 12310, 40004, 11],
               [800, 64, 198, 11182, 42517, 11], [850, 64, 181, 11026, 42838, 10],
               [900, 64, 183, 9568, 46041, 10], [950, 64, 169, 9396, 46397, 9],
               [1000, 64, 159, 9000, 47230, 9],

               [700, 128, 299, 8209, 49099, 17], [750, 128, 282, 7425, 50759, 16],
               [800, 128, 263, 6911, 51827, 15], [850, 128, 255, 5814, 54129, 15],
               [900, 128, 247, 4798, 56253, 15], [950, 128, 231, 4416, 56983, 14],
               [1000, 128, 216, 4153, 57524, 13],

               [700, 256, 380, 3899, 58244, 24], [750, 256, 356, 3133, 59771, 23],
               [800, 256, 326, 2951, 60109, 21], [850, 256, 302, 2684, 60676, 20],
               [900, 256, 292, 1696, 62777, 21], [950, 256, 269, 1582, 62898, 19],
               [1000, 256, 251, 1423, 63264, 18] ]


all_params14 =[[700, 64, 116, 2253, 28240, 4], [750, 64, 106, 1920, 28924, 4], [800, 64, 108, 798, 31207, 4], [850, 64, 104, 164, 32515, 5], [900, 64, 93, 106, 32623, 5], [950, 64, 91, 0, 33456, 0], [1000, 64, 91, 0, 34325, 0], [700, 128, 148, 265, 32324, 7], [750, 128, 133, 125, 32616, 7], [800, 128, 120, 0, 32890, 0], [850, 128, 105, 88, 32670, 6], [900, 128, 94, 43, 32769, 7], [950, 128, 91, 0, 33456, 0], [1000, 128, 91, 0, 34325, 0], [700, 192, 153, 0, 32900, 0], [750, 192, 133, 125, 32616, 7], [800, 192, 119, 85, 32732, 7], [850, 192, 106, 59, 32776, 7], [900, 192, 94, 62, 32750, 6], [950, 192, 91, 0, 33456, 0], [1000, 192, 91, 0, 34325, 0], [700, 256, 150, 151, 32563, 8], [750, 256, 133, 125, 32616, 7], [800, 256, 119, 59, 32758, 8], [850, 256, 107, 0, 32913, 0], [900, 256, 94, 62, 32750, 6], [950, 256, 91, 0, 33456, 0], [1000, 256, 91, 0, 34325, 0], [700, 512, 152, 58, 32780, 11], [750, 512, 134, 63, 32745, 9], [800, 512, 119, 59, 32758, 8], [850, 512, 106, 59, 32776, 7], [900, 512, 95, 0, 32894, 0], [950, 512, 91, 10, 33446, 10], [1000, 512, 91, 10, 34315, 10]]

all_params15 = [ [700, 64, 186, 14350, 34934, 5], [750, 64, 228, 10330, 43999, 6],
               [800, 64, 218, 9493, 45832, 6], [850, 64, 208, 8745, 47454, 6],
               [900, 64, 208, 7327, 50501, 6], [950, 64, 182, 8014, 49024, 5],
               [1000, 64, 200, 5162, 55061, 6],

               [700, 128, 366, 4166, 57182, 11], [750, 128, 339, 3677, 58191, 10],
               [800, 128, 284, 5189, 55043, 8], [850, 128, 289, 3112, 59331, 9],
               [900, 128, 264, 3175, 59203, 8], [950, 128, 255, 2207, 61164, 8],
               [1000, 128, 229, 2734, 60086, 7],

               [700, 192, 390, 2897, 59804, 12], [750, 192, 357, 2642, 60322, 11],
               [800, 192, 328, 2416, 60773, 10], [850, 192, 311, 1652, 62330, 10],
               [900, 192, 283, 1806, 62005, 9], [950, 192, 272, 917, 63796, 10],
               [1000, 192, 253, 803, 64049, 9]
               ]

all_params16 = [[700, 64, 502, 29972, 66900, 12], [750, 64, 496, 27694, 72150, 12], [800, 64, 299, 37512, 49128, 7], [850, 64, 292, 36075, 52534, 7], [900, 64, 251, 37402, 49384, 6], [950, 64, 303, 31484, 63348, 7], [1000, 64, 247, 34312, 56697, 6], [700, 128, 539, 28087, 71276, 13], [750, 128, 501, 27433, 72768, 12], [800, 128, 566, 21107, 86998, 14], [850, 128, 492, 22833, 83154, 12], [900, 128, 491, 20366, 88615, 12], [950, 128, 458, 20137, 89112, 11], [1000, 128, 475, 16489, 97048, 12], [700, 192, 693, 20518, 88335, 17], [750, 192, 644, 19810, 89879, 16], [800, 192, 674, 15094, 100094, 17], [850, 192, 598, 16406, 97262, 15], [900, 192, 588, 14138, 102114, 15], [950, 192, 575, 12149, 106327, 15], [1000, 192, 541, 11737, 107182, 14], [700, 256, 840, 13621, 103275, 22], [750, 256, 762, 13788, 102902, 20], [800, 256, 718, 12699, 105197, 19], [850, 256, 679, 11646, 107409, 18], [900, 256, 707, 6747, 117592, 20], [950, 256, 664, 6265, 118573, 19], [1000, 256, 623, 5967, 119170, 18], [700, 512, 1030, 5050, 121177, 32], [750, 512, 947, 4672, 121897, 29], [800, 512, 877, 4260, 122739, 27], [850, 512, 813, 3997, 123255, 25], [900, 512, 760, 3539, 124163, 24], [950, 512, 707, 3498, 124248, 22], [1000, 512, 664, 3162, 124919, 21]]
all_params17 = [[800, 128, 699, 81027, 84065, 15], [850, 128, 696, 77483, 92421, 15], [900, 128, 649, 77111, 93297, 14], [950, 128, 609, 76624, 94446, 13], [1000, 128, 688, 67530, 115975, 15], [700, 192, 882, 78641, 89721, 19], [750, 192, 1036, 66339, 118846, 23], [800, 192, 830, 73100, 102840, 18], [850, 192, 1027, 57837, 138655, 23], [900, 192, 862, 63281, 125989, 19], [950, 192, 1009, 50151, 156190, 23], [1000, 192, 854, 56030, 142783, 19], [700, 256, 1203, 63227, 126183, 27], [750, 256, 1040, 66150, 119306, 23], [800, 256, 1072, 59937, 133821, 24], [850, 256, 1064, 55805, 143348, 24], [900, 256, 1016, 54080, 147284, 23], [950, 256, 1048, 47774, 161558, 24], [1000, 256, 1034, 44243, 169433, 24], [700, 512, 1848, 35889, 187954, 46], [750, 512, 1756, 33078, 194012, 44], [800, 512, 1667, 30700, 199099, 42], [850, 512, 1831, 16256, 229510, 51], [900, 512, 1504, 26837, 207301, 38], [950, 512, 1498, 21375, 218804, 39], [1000, 512, 1394, 21859, 217769, 36]]


ln2 = log(2)
e = exp(1)
const = 2*pi*e
# h = 128
# n = 2**15
# logq = 700
# lnq = logq * ln2
#
# wg = 17
# ng = 8209
# d = 49099
# beta = 299

def entropy(x):
    return -x*log2(x) -(1-x)*log2(1-x)

#print((0.5*(ng*entropy(wg/ng)+wg)+log(d,2)).n(), 0.292*beta+16.4+3)
#print((0.5*(log(binomial(ng, wg),2)+wg) + log(d,2)).n(), 0.292*beta+16.4+3 )
#print((log((n-ng)/ng,2) - log( (n-h+wg-ng)/(ng-wg) ,2) + (1-0.5/0.292)*log(1-wg/ng,2)).n())
#print((log((n-ng)/ng,2)).n(), log( (n-h+wg-ng)/(ng-wg) ,2).n(), (1-0.5/0.292)*log(1-wg/ng,2).n())
#print((log((n-ng)/ng,2) - log( (n-h+wg-ng/(ng-wg)) ,2) + 0.5*log(1-wg/ng,2)).n())

# eq1 = lambda ng_, beta_, d_: 0.5*(ng_*entropy(wg/ng_)+wg)+log(d_,2) - (0.292*beta_+16.4+3)
# eq2 = lambda ng_, beta_: log((n-ng_)/ng_,2) - log( (n-h+wg-ng_)/(ng_-wg) ,2) + (1-0.5/0.292)*log(1-wg/ng_,2)
# eq3 = lambda ng_, beta_, d_: d_ - sqrt(n * lnq / log(_delta(beta_))) + ng_ - 1
#
# def system(x):
#     f2 = eq2(x[0], x[1])
#     f1 = eq1(x[0], x[1], x[2])
#     f3 = eq3(x[0], x[1], x[2])
#     return f1, f2, f3

#res = fsolve(system, [4000, 150, 10000], full_output=True)
#print(res)

def approx_binom(n, k):
    return n*entropy(k/n)+0.5*log2(n/(8*k*(n-k)))

def approx_startpoint(n, logq, h):
    sigma_s = sqrt(h/n)
    sigma_e = 3.19
    #eq1 = lambda beta, d: d*log2(beta)/beta - (1-n/d)*logq - n/d*log2(sigma_e/sigma_s) + log2(sigma_e)

    lnq = logq * ln2
    zeta = round(sigma_e/sigma_s)

    # find beta numerically
    beta_initial_guess = n / 4

    nom = lambda beta : 2 * n * lnq * log(beta/const)
    denom = lambda beta : log(beta/const) + 2 * lnq - 2 * log(sigma_e) - log(const) - 2 * (lnq - log(zeta)) * sqrt(n * log(beta/const) / (2 * lnq * beta))
    eq6 = lambda beta : beta - nom(beta) / (denom(beta)**2)

    beta_solution = fsolve(eq6, beta_initial_guess, full_output = False)

    # compute d (from 'FHE Formulas.pdf')
    d_optimal = sqrt(2 * n * lnq * beta_solution[0] / log(beta_solution[0] / const))
    return [beta_solution[0], d_optimal]

def prob_sum(n,ng, w):
    s = 0
    for i in range(1, w+1):
        s+=approx_binom(n-h, ng-i)+approx_binom(h, i)-approx_binom(n, ng)
    return s

def test_runtime(n, ng, w, h):
    s1 = 0
    s2 = 0
    for i in range(1, w+1):
        s1+=2**i*scipy.special.binom(ng, i)
        s2+= scipy.special.binom(n-h, ng-i)*scipy.special.binom(h, i)

    return log2(scipy.special.binom(n, ng))+log2(s1) - log2( s2 )

#[logq, h, beta, ng, d, wg]
for param in all_params15:
    wg = param[5]-1
    h = param[1]
    lnq = param[0] * ln2
    n = 2**15
    sigma_s = sqrt(h/n)
    sigma_e = 3.19
    xi = sigma_e/ sigma_s
    eq1 = lambda ng_, beta_, d_: (approx_binom(ng_,wg)+wg)+log2(d_) - (0.292*beta_+16.4+3)+2  #0.5*(ng_*entropy(wg/ng_)+wg) #- 0.5*log2(8*n*wg/ng_*(1-wg/ng_)) #0.5*(log2(math.comb(ng_, wg),2)+wg)
    eq2 = lambda ng_: log2((n-ng_)/ng_)+log2( (n-h+wg-ng_)/(ng_-wg)) -0.5*log2(1-wg/ng_)
    eq3 = lambda ng_, beta_, d_: d_ - sqrt(n * lnq / log(_delta(beta_))) + ng_ - 1 #adding ceil over sqrt() makes the eq. precise
    eqn = lambda ng_, beta_, d_: (-d_-1)*log2(_delta(beta_))+ ((d_-n+ng_-1)*param[0]+ (n-ng_)*log2(xi))/d_ - 4 #success probablity of Babai=1, i.e. ||b_d*|| = sigma_e \approx 4
    prob = lambda ng_ : approx_binom(n-h, ng_-wg)+approx_binom(h, wg)-approx_binom(n, ng_) #(n-h)*entropy((ng_-wg)/(n-h)) + h*entropy(wg/h) - n*entropy(ng_/n)
    eq4 = lambda ng_, d_ : (approx_binom(ng_,wg)+wg)+2*log2(d_) -1 -prob(ng_)
    eq5 = lambda ng_, beta_, d_ :  (0.292*beta_+16.4+3 + log2(d_)) - prob(ng_)
    print(param[0],param[1], param[2], param[3], param[4], ": ", eq1(param[3], param[2], param[4]), eq3(param[3], param[2], param[4]), eqn(param[3], param[2], param[4]) )
    #print(param[0],param[1], param[2], param[3], param[4], ": ", eq4(param[3],param[4]), eq5(param[3], param[2], param[4]), prob(param[3]))


    def system(x):
            f1 = eq1(x[0], x[1], x[2])
            #f2 = eq2(x[0])
            f3 = eq3(x[0], x[1], x[2])
            fn = eqn(x[0], x[1], x[2])
            return f1, f3, fn

    #print('approx start:', approx_startpoint(n,param[0], param[1]))
    initial_guess = approx_startpoint(n,param[0], param[1])
    res = fsolve(system, [n/16, initial_guess[0]-10, initial_guess[1]-200], maxfev = 2**21, full_output=False)
    print(eq1(res[0], res[1], res[2]),eq3(res[0], res[1], res[2]), eqn(res[0], res[1], res[2]))
    print(res)
    #print(test_runtime(n, param[3], wg, h))
    print("--------------")